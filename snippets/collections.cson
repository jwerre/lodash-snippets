".source.js":
  "_.at":
    "prefix": "_at"
    "body": """
    _.at( ${1:collection}, ${2:index})
    """
  "_.contains":
    "prefix": "_con"
    "body": """
    _.contains( ${1:collection}, ${2:target})
    """
  "_.countBy":
    "prefix": "_count"
    "body": """
    _.countBy(${1:collection}, function(${2:element}){

        ${3:// build iterator here}

    });;
    """
  "_.every":
    "prefix": "_ev"
    "body": """
    _.every(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });;
    """
  "_.filter":
    "prefix": "_fil"
    "body": """
    _.filter(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });
    """
  "_.find":
    "prefix": "_find"
    "body": """
    _.find(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });
    """
  "_.findLast":
    "prefix": "_findLast"
    "body": """
    _.findLast(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });
    """
  "_.forEach":
    "prefix": "_each"
    "body": """
    _.forEach(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });
    """
  "_.forEachRight":
    "prefix": "_eachr"
    "body": """
    _.forEachRight(${1:collection}, function(${2:element}){

        ${3: // do something here}

    });
    """
  "_.groupBy":
    "prefix": "_gr"
    "body": """
    _.groupBy(${1:collection}, function(${2:element}){

        ${3:// build iterator here}

    });
    """
  "_.indexBy":
    "prefix": "_index"
    "body": """
    _.indexBy(${1:collection}, function(${2:element}){

        ${3:// build iterator here}

    });
    """
  "_.invoke":
    "prefix": "_inv"
    "body": """
    _.invoke(${1:collection}, ${2:methodName})
    """
  "_.map":
      "prefix": "_map"
      "body": """
      _.map( ${1:collection}, function( ${2:element}){

          ${3: // build iterator here}

      });
      """
  "_.max":
    "prefix": "_max"
    "body": """
    _.max( ${1:collection})
    """
  "_.min":
    "prefix": "_min"
    "body": """
    _.min( ${1:collection})
    """
  "_.pluck":
    "prefix": "_pl"
    "body": """
    _.pluck( ${1:collection}, ${2:property})
    """
  "_.reduce":
    "prefix": "_red"
    "body": """
    _.reduce( ${1:collection}, function( ${2:element}){

        ${3: // build iterator here}

    });
    """
  "_.reduceRight":
    "prefix": "_redr"
    "body": """
    _.reduceRight( ${1:collection}, function( ${2:element}){

        ${3: // build iterator here}

    });
    """
  "_.reject":
    "prefix": "_rej"
    "body": """
    _.reject( ${1:collection}, function( ${2:element}){

        ${3:// build iterator here}

    });
    """
  "_.sample":
    "prefix": "_sam"
    "body": "_.sample( ${1:collection})"
  "_.shuffle":
    "prefix": "_shuf"
    "body": "_.shuffle( ${1:collection})"
  "_.size":
    "prefix": "_size"
    "body": "_.size( ${1:collection})"
  "_.some":
    "prefix": "_some"
    "body": """
    _.some( ${1:collection}, function( ${2:element}){

        ${3:// build iterator here}

    });
    """
  "_.sortBy":
    "prefix": "_sort"
    "body": """
    _.sortBy( ${1:collection}, function( ${2:element}){

        ${3:// build iterator here}

    });
    """
  "_.toArray":
    "prefix": "_toa"
    "body": "_.toArray( ${1:collection})"
  "_.where":
    "prefix": "_whe"
    "body": """
    _.where( ${1:collection}, ${2:props})
    """
